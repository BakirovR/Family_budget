const token = "";
const chat_id = "";
const sheetname = 'Messages';
const list_id = ''
const webAppUrl = '';


const sheet = SpreadsheetApp.openById(list_id).getSheetByName(sheetname);
const emojiRegex = /(?:[\p{Emoji_Modifier_Base}\p{Emoji_Presentation}]\uFE0F?|\p{Emoji}\uFE0F?)/gu;



const expenses = {
  'üçî –ï–¥–∞': ['üõí –ú–∞–≥–∞–∑–∏–Ω', 'üç¥ –ü–∏—Ç–∞–Ω–∏–µ –≤–Ω–µ –¥–æ–º–∞'],
  'üè† –î–æ–º': ['üí≥ –ö—Ä–µ–¥–∏—Ç', 'üîß –†–µ–º–æ–Ω—Ç', 'üè¢ –ê—Ä–µ–Ω–¥–∞'],
  'üéâ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è': ['‚úàÔ∏è –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è', 'üé≤ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏'],
  'üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç': ['üöô –ê–≤—Ç–æ–º–æ–±–∏–ª—å', 'üöÜ –û–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç', 'üõ¥ –†–∞–∑–Ω–æ–µ'],
  'üîç –î—Ä—É–≥–æ–µ': ['üê∂ –ñ–∏–≤–æ—Ç–Ω—ã–µ', 'üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', 'ü§≤ –ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', 'üí∞ –§–æ–Ω–¥—ã', 'üéÅ –ü–æ–¥–∞—Ä–∫–∏', 'üè• –ó–¥–æ—Ä–æ–≤—å–µ', 'üëï –û–¥–µ–∂–¥–∞', 'üÜï –î—Ä—É–≥–æ–µ']
};


// –û–±—ä–µ–∫—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –¥–æ—Ö–æ–¥–æ–≤
const income = {
  'üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞': ['üíº –û—Å–Ω–æ–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞', 'üí∏ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è'],
  'üè¢ –ë–∏–∑–Ω–µ—Å': ['üìà –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏', 'üè† –°–¥–∞—á–∞ –∂–∏–ª—å—è'],
  'üíπ –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ': ['üí∞ –î–µ–ø–æ–∑–∏—Ç', 'üìà –ê–∫—Ü–∏–∏', 'üìä –û–±–ª–∏–≥–∞—Ü–∏–∏', 'üíº –§–æ–Ω–¥—ã']
};

// –û–±—ä–µ–∫—Ç –±–∞–Ω–∫
const banks = ['üçè –°–±–µ—Ä–±–∞–Ω–∫', 'üçã –¢–∏–Ω—å–∫–æ—Ñ—Ñ', 'üçå –†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω', 'üçé –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫', 'üíµ –ù–∞–ª–∏—á–Ω—ã–µ'];

function getMe() {
  const response = UrlFetchApp.fetch(`https://api.telegram.org/bot${token}/getMe`);
  console.log(response.getContentText());


function setWebhook() {
  
  const response = UrlFetchApp.fetch(`https://api.telegram.org/bot${token}/setWebhook?url=${webAppUrl}`);
  console.log(response.getContentText());
}
}


function sendText(chat_id, text) {
  const data = {
    method: 'sendMessage',
    chat_id: String(chat_id),
    text: text 
  };

  if (text === '–û–ø–∏—Å–∞–Ω–∏–µ:') { // –¥–æ–±–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ç–∫–∞
    handleDescriptionInput(chat_id, text);
  } else {
    UrlFetchApp.fetch(`https://api.telegram.org/bot${token}/sendMessage`, { method: 'post', payload: data });
  }
}


function sendIncomeOrExpenses(chat_id) {
  const keyboard = {
    keyboard: [
      [{ text: 'üßæ –†–∞—Å—Ö–æ–¥' }, { text: 'üí∞ –î–æ—Ö–æ–¥' }]
    ],
    one_time_keyboard: true,
    resize_keyboard: true
  };

  const data = {
    method: 'sendMessage',
    chat_id: String(chat_id),
    text: '–í—ã–±–µ—Ä–∏ —Ç–∏–ø:',
    reply_markup: JSON.stringify(keyboard)
  };

  UrlFetchApp.fetch(`https://api.telegram.org/bot${token}/sendMessage`, { method: 'post', payload: data });
}






function sendCategories(chat_id, type) {
  let keyboard = {
    keyboard: Object.keys(type === 'income' ? income : expenses).map(category => [{ text: category }]),
    one_time_keyboard: true,
    resize_keyboard: true
  };

  const data = {
    method: 'sendMessage',
    chat_id: String(chat_id),
    text: `–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è ${type === 'income' ? '–¥–æ—Ö–æ–¥–æ–≤' : '—Ä–∞—Å—Ö–æ–¥–æ–≤'} `,
    reply_markup: JSON.stringify(keyboard)
  };

  UrlFetchApp.fetch(`https://api.telegram.org/bot${token}/sendMessage`, { method: 'post', payload: data });
  
}



function handleCategorySelection(chat_id, category, type) {
  const lastRow = sheet.getLastRow();
  const data = [new Date(), '', category.replace(emojiRegex, '').replace(/\s/g, ''), '', '','', type === 'income' ? '–î–æ—Ö–æ–¥' : '–†–∞—Å—Ö–æ–¥']; 
  sheet.getRange(lastRow + 1, 1, 1, data.length).setValues([data]);
  sendSubcategories(chat_id, category, type);
}




function sendSubcategories(chat_id, category, type) {
  let subcategories = type === 'income' ? income[category] : expenses[category];
  let keyboard = {
    keyboard: subcategories.map(subcategory => [{ text: "–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: " + subcategory }]),
    one_time_keyboard: true,
    resize_keyboard: true
  };

  const data = {
    method: 'sendMessage',
    chat_id: String(chat_id),
    text: `–í—ã–±–µ—Ä–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è ${type === 'income' ? '–¥–æ—Ö–æ–¥–æ–≤' : '—Ä–∞—Å—Ö–æ–¥–æ–≤'}:`,
    reply_markup: JSON.stringify(keyboard)
  };

  UrlFetchApp.fetch(`https://api.telegram.org/bot${token}/sendMessage`, { method: 'post', payload: data });
}


function handleSubcategorySelection(chat_id, subcategory) {
  const typeParts = subcategory.replace(emojiRegex, '').replace(/\s/g, '').split(':');
  
  const secondpart = typeParts[1].trim();

  const lastRow = sheet.getLastRow();
  const prevRow = sheet.getRange(lastRow, 1, 1, 7).getValues()[0];
  
  prevRow[3] = secondpart;
  sheet.getRange(lastRow, 1, 1, prevRow.length).setValues([prevRow]);
  sendBanks(chat_id, banks);
}



function handleAmountInput(chat_id, amount) {
  
  const lastRow = sheet.getLastRow();
  const prevRow = sheet.getRange(lastRow, 1, 1, 7).getValues()[0];
  
  prevRow[5] = amount;
  sheet.getRange(lastRow, 1, 1, prevRow.length).setValues([prevRow]);
  sendText(chat_id, `–í–≤–µ–¥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ:`);
  
}

function sendKeyboard(chat_id, text, buttons) {
  const keyboard = {
    keyboard: buttons,
    one_time_keyboard: true,
    resize_keyboard: true
  };

  const data = {
    method: 'sendMessage',
    chat_id: String(chat_id),
    text: text,
    reply_markup: JSON.stringify(keyboard)
  };

  UrlFetchApp.fetch(`https://api.telegram.org/bot${token}/sendMessage`, { method: 'post', payload: data });
}


function handleDescriptionInput(chat_id, description) {
  
  const lastRow = sheet.getLastRow();
  const prevRow = sheet.getRange(lastRow, 1, 1, 7).getValues()[0];
  prevRow[4] = description
  sheet.getRange(lastRow, 1, 1, prevRow.length).setValues([prevRow]);
  sendText(chat_id, `–°—Ç—Ä–æ–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞.\n\n–í—ã–±—Ä–∞–Ω–∞: \n–∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${prevRow[2]}; \n–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${prevRow[3]}; \n–±–∞–Ω–∫: ${prevRow[1]}. \n\n–í–≤–µ–¥–µ–Ω–∞: \n—Å—É–º–º–∞: ${prevRow[5]}; \n–æ–ø–∏—Å–∞–Ω–∏–µ: ${prevRow[4]}.`);
  sendKeyboard(chat_id, '–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –¥–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤–æ–µ! –Ø –≥–æ—Ç–æ–≤ –∫ üêæ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è–º!', [[{ text: '–í–Ω–µ—Å—Ç–∏ –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å' }, { text: '–£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É' }],
  ]);

}


function sendBanks(chat_id, banksArray) {
  const keyboard = {
    keyboard: [
      ...banksArray.map(bank => [{ text: `–ë–∞–Ω–∫: ${bank}` }])
      
    ],
    one_time_keyboard: true,
    resize_keyboard: true
  };

  const data = {
    method: 'sendMessage',
    chat_id: String(chat_id),
    text: '–í—ã–±–µ—Ä–∏ –±–∞–Ω–∫:',
    reply_markup: JSON.stringify(keyboard)
  };

  UrlFetchApp.fetch(`https://api.telegram.org/bot${token}/sendMessage`, { method: 'post', payload: data });
}


function handleBankSelection(chat_id, type) {
  
  const typeParts = type.replace(emojiRegex, '').replace(/\s/g, '').split(':'); 
  const bank = typeParts[1].trim();
  const lastRow = sheet.getLastRow();
  const prevRow = sheet.getRange(lastRow, 1, 1, 7).getValues()[0];

  
  prevRow[1] = bank;
  sheet.getRange(lastRow, 1, 1, prevRow.length).setValues([prevRow]);

  sendText(chat_id, `–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${prevRow[2]}, –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${prevRow[3]} –∏ –±–∞–Ω–∫: ${prevRow[1]}. –í–≤–µ–¥–∏ —Å—É–º–º—É:`);
}

function handleDeleteRecord(chat_id) {
  
  const lastRow = sheet.getLastRow();
  if (lastRow > 1) {
    sheet.deleteRow(lastRow);
    sendText(chat_id, `–ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞.`);
    sendKeyboard(chat_id, '–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –¥–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤–æ–µ! –Ø –≥–æ—Ç–æ–≤ –∫ üêæ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è–º!', [
    [{ text: '–í–Ω–µ—Å—Ç–∏ –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å' }, { text: '–£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É' }],
  ]);
  } else {
    sendText(chat_id, `–¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞.`);
  }
}

function doPost(e) {
  try {
    const lastRow = sheet.getLastRow();
    const prevRow = sheet.getRange(lastRow, 1, 1, 7).getValues()[0];
    const contents = JSON.parse(e.postData.contents);
    const chat_id = contents.message.chat.id;
    const text = contents.message.text;

    switch(text) {
      case '/start':
        sendIncomeOrExpenses(chat_id);
        break;
      case 'üí∞ –î–æ—Ö–æ–¥':
      case 'üßæ –†–∞—Å—Ö–æ–¥':
        sendCategories(chat_id, text === 'üí∞ –î–æ—Ö–æ–¥' ? 'income' : 'expenses');
        break;
      case '–í–Ω–µ—Å—Ç–∏ –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å':
        sendIncomeOrExpenses(chat_id);
        break;
      case '–£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É':
      case '/delete':
        handleDeleteRecord(chat_id);
        break;
      case '/help':
         sendText(chat_id, '–ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ –≤–µ—Å—Ç–∏ —É—á–µ—Ç —Ç–≤–æ–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –¥–æ—Ö–æ–¥–æ–≤. –í–æ—Ç, —á—Ç–æ —è —É–º–µ—é:\n\n- –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–±–µ—Ä–∏ "/start";\n- –ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å - –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É "/delete";\n- –ß—Ç–æ–±—ã –≤–Ω–µ—Å—Ç–∏ –¥–æ—Ö–æ–¥, —Ä–∞—Å—Ö–æ–¥, –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –±–∞–Ω–∫ - –≤—ã–±–µ—Ä–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞;\n- –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Å—É–º–º—É - –∏—Å–ø–æ–ª—å–∑—É–π –ø–æ–ª–µ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞;\n- –ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ - –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É: ‚ò∞ \n\n–ù–µ —Å—Ç–µ—Å–Ω—è–π—Å—è –ø–æ–ø—Ä–æ—Å–∏—Ç—å —É –º–µ–Ω—è –ø–æ–º–æ—â–∏ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è!'); 
        break;
      
      default:
        if (expenses[text]) {
          handleCategorySelection(chat_id, text, 'expenses');
        } else if (income[text]) {
          handleCategorySelection(chat_id, text, 'income');
        } else if (text.startsWith('–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è')) {
          const category = text;
          handleSubcategorySelection(chat_id, category);
        } else if (text.startsWith('–ë–∞–Ω–∫')) {
          const type = text;
          handleBankSelection(chat_id, type);
        } else if (prevRow && prevRow[5] === '' && !isNaN(text) && prevRow[4] === ''&& prevRow[3] !== ''&& prevRow[1] !== ''&& prevRow[6] !== '') {
          handleAmountInput(chat_id, text);
        } else if (prevRow && prevRow[4] === ''&& prevRow[5] !== '') {    
          handleDescriptionInput(chat_id, text);
        } else {
          sendText(chat_id, '–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ —Ç—ã –≥–æ–≤–æ—Ä–∏—à—å.\n\n –í–æ–∑–º–æ–∂–Ω–æ: \n - —Ç—ã –Ω–µ –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ –±–∞–Ω–∫–∞; \n - —É —Ç–µ–±—è —Å–≤–µ—Ä–Ω—É–ª–∞—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞, –Ω–∞–π–¥–∏ –∑–Ω–∞—á–æ–∫ [88] –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è; \n - —Ç—ã –Ω–µ –≤–≤–µ–ª —Å—É–º–º—É —Ü–∏—Ñ—Ä–∞–º–∏. \n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.');
        }
    }
  } catch (error) {
    console.error(error);
    sendText(chat_id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.');
  }
}




